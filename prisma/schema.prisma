generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  password         String
  name             String
  role             Role              @default(PATIENT)
  createdAt        DateTime          @default(now())
  doctorId         String?
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  assessments      Assessment[]
  badges           BadgeAssignment[]
  DailyTask        DailyTask[]
  GameProgress     GameProgress[]
  receivedMessages Message[]         @relation("ReceiverRelation")
  sentMessages     Message[]         @relation("SenderRelation")
  progress         Progress[]
  quiz             Quiz[]
  quizzes          Result?
  doctor           Doctor?           @relation("DoctorPatients", fields: [doctorId], references: [id])
  YoutubeActivity  YoutubeActivity[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Quiz {
  id        String   @id @default(uuid())
  disorder  Disorder @unique
  score     Int
  questions Json
  category  String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  results   Result[]
}

model Result {
  id        String   @id @default(uuid())
  userId    String   @unique
  quizId    String
  score     Int
  severity  Severity
  createdAt DateTime @default(now())
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Task {
  id          String     @id @default(uuid())
  disorder    Disorder
  severity    Severity
  title       String
  description String
  week        Int
  createdAt   DateTime   @default(now())
  progress    Progress[]
}

model Progress {
  id        String   @id @default(uuid())
  userId    String
  taskId    String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Assessment {
  id        String   @id @default(uuid())
  userId    String
  week      Int
  score     Int
  feedback  String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Doctor {
  id        String @id @default(uuid())
  userId    String @unique
  specialty String
  patients  User[] @relation("DoctorPatients")
}

model Message {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  sentAt     DateTime @default(now())
  receiver   User     @relation("ReceiverRelation", fields: [receiverId], references: [id])
  sender     User     @relation("SenderRelation", fields: [senderId], references: [id])
}

model Badge {
  id              String            @id @default(uuid())
  name            String            @unique
  criteria        String
  BadgeAssignment BadgeAssignment[]
}

model BadgeAssignment {
  id        String   @id @default(uuid())
  userId    String
  badgeId   String
  awardedAt DateTime @default(now())
  badge     Badge    @relation(fields: [badgeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model GameProgress {
  id               String   @id @default(uuid())
  userId           String
  gameId           String
  datePlayed       DateTime @default(now())
  score            Int      @default(0)
  completion       Boolean  @default(false)
  timeSpent        Int?
  accuracy         Float?
  difficulty       String
  streak           Int?     @default(0)
  frustrationScore Int?
  badgesEarned     String[]
  challengesDone   Int?
  gameData         Json?
  dropOffRate      Float    @default(0)
  user             User     @relation(fields: [userId], references: [id])
}

model DailyTask {
  id         String   @id @default(uuid())
  userId     String
  disorder   String
  severity   String
  week       Int
  day        Int
  task       String
  status     String   @default("pending")
  reflection String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model Streak {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  icon        String?
  achieved    Boolean
  date        DateTime @default(now())
}

model YoutubeActivity {
  id         String  @id @default(uuid())
  userId     String
  disorder   String
  severity   String
  week       Int
  day        Int
  activity   String
  status     String  @default("pending")
  reflection String?
  user       User    @relation(fields: [userId], references: [id])
}

enum Role {
  PATIENT
  DOCTOR
  ADMIN
}

enum Disorder {
  PTSD
  ANXIETY
  DEPRESSION
  OCD
  EATING_DISORDER
  STRESS
  PANIC_DISORDER
  SOCIAL_ANXIETY
  ADDICTION
}

enum Severity {
  MILD
  MODERATE
  SEVERE
}
